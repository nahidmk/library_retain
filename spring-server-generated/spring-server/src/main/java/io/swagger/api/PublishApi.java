/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Publisher;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-09T04:56:53.355Z")

@Api(value = "publish", description = "the publish API")
@RequestMapping(value = "")
public interface PublishApi {

    @ApiOperation(value = "Add a new publish", nickname = "addPublish", notes = "", tags={ "Publisher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/publish",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addPublish(@ApiParam(value = "publisher object that needs to be added" ,required=true )  @Valid @RequestBody Publisher body);


    @ApiOperation(value = "Deletes a publisher", nickname = "deletePublisher", notes = "", tags={ "Publisher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Publisher not found") })
    @RequestMapping(value = "/publish/{Id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePublisher(@ApiParam(value = "Publisher id to delete",required=true) @PathVariable("Id") Long id);


    @ApiOperation(value = "Find all publish", nickname = "findAllPublish", notes = "Return all the publish as a list", response = Publisher.class, responseContainer = "List", tags={ "Publisher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Publisher.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid value") })
    @RequestMapping(value = "/publish",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Publisher>> findAllPublish();


    @ApiOperation(value = "Find publisher by name", nickname = "getPublisherByName", notes = "Returns a single publisher", response = Publisher.class, tags={ "Publisher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Publisher.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "publisher not found") })
    @RequestMapping(value = "/publish/by/{name}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Publisher> getPublisherByName(@ApiParam(value = "ID of puhlisher to return",required=true) @PathVariable("name") String name);


    @ApiOperation(value = "Find publisher by ID", nickname = "getpublisherById", notes = "Returns a single publisher", response = Publisher.class, tags={ "Publisher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Publisher.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "publisher not found") })
    @RequestMapping(value = "/publish/{Id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Publisher> getpublisherById(@ApiParam(value = "ID of publisher to return",required=true) @PathVariable("Id") Long id);


    @ApiOperation(value = "Update an existing publish", nickname = "updatepublish", notes = "", tags={ "Publisher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "publish not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/publish",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatepublish(@ApiParam(value = "publish object that needs to be added" ,required=true )  @Valid @RequestBody Publisher body);

}
