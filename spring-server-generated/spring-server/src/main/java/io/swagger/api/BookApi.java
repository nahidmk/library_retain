/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Book;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-09T04:56:53.355Z")

@Api(value = "book", description = "the book API")
@RequestMapping(value = "")
public interface BookApi {

    @ApiOperation(value = "Add a new Book", nickname = "addBook", notes = "", tags={ "Books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/book",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addBook(@ApiParam(value = "Book object that needs to be added" ,required=true )  @Valid @RequestBody Book body);


    @ApiOperation(value = "Deletes a Book", nickname = "deleteBook", notes = "", tags={ "Books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Book not found") })
    @RequestMapping(value = "/book/{Id}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBook(@ApiParam(value = "Book id to delete",required=true) @PathVariable("Id") Long id);


    @ApiOperation(value = "Find all book", nickname = "findAllBook", notes = "Return all the book as a list", response = Book.class, responseContainer = "List", tags={ "Books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid value") })
    @RequestMapping(value = "/book",
        produces = {  "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> findAllBook();


    @ApiOperation(value = "Finds Book by Author Name", nickname = "findBookByAuthor", notes = "return a list of book by same author", response = Book.class, responseContainer = "List", tags={ "Books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Author value") })
    @RequestMapping(value = "/book/find/{author}",
        produces = {  "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> findBookByAuthor(@ApiParam(value = "",required=true) @PathVariable("author") String author);


    @ApiOperation(value = "Find book by ID", nickname = "getBookById", notes = "Returns a single Book", response = Book.class, tags={ "Books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Book.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Book not found") })
    @RequestMapping(value = "/book/{Id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Book> getBookById(@ApiParam(value = "ID of Book to return",required=true) @PathVariable("Id") Long id);


    @ApiOperation(value = "Find book by title", nickname = "getBookByTitle", notes = "Returns a List of Book By same title", response = Book.class, tags={ "Books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Book.class),
        @ApiResponse(code = 400, message = "Invalid Title supplied"),
        @ApiResponse(code = 404, message = "Book not found") })
    @RequestMapping(value = "/book/by/{title}",
        produces = {  "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> getBookByTitle(@ApiParam(value = "Title of Book to return",required=true) @PathVariable("title") String title);


    @ApiOperation(value = "Update an existing Book", nickname = "updateBook", notes = "", tags={ "Books", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Book not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/book",
        produces = {  "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateBook(@ApiParam(value = "Book object that needs to be added" ,required=true )  @Valid @RequestBody Book body);

}
